# ===============================================================
# üì¶ Secure Docker Build & Scan Workflow
# ===============================================================
#
# This workflow:
#   - Builds and tags the container image (`latest` + timestamp)
#   - Re-uses a BuildKit layer cache for faster rebuilds
#   - Lints the Dockerfile with **Hadolint** (CLI) ‚Üí SARIF
#   - Lints the finished image with **Dockle** (CLI) ‚Üí SARIF
#   - Generates an SPDX SBOM with **Syft**
#   - Scans the image for CRITICAL CVEs with **Trivy**
#   - Uploads Hadolint, Dockle and Trivy results as SARIF files
#   - Pushes the image to **GitHub Container Registry (GHCR)**
#   - Signs & attests the image with **Cosign (key-less OIDC)**
#
# Triggers:
#   - Every push / PR to `main`
#   - Weekly scheduled run (Tue 18:17 UTC) to catch new CVEs
# ---------------------------------------------------------------

name: Secure Docker Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "17 18 * * 2" # Tuesday @ 18:17 UTC

# -----------------------------------------------------------------
# Minimal permissions - keep the principle of least privilege
# -----------------------------------------------------------------
permissions:
  contents: read
  packages: write # push to ghcr.io via GITHUB_TOKEN
  security-events: write # upload SARIF to "Code scanning"
  actions: read # needed by upload-sarif in private repos
  id-token: write # required for OIDC token generation

jobs:
  build-scan-sign:
    runs-on: ubuntu-latest

    env:
      CACHE_DIR: /tmp/.buildx-cache # BuildKit layer cache dir

    steps:
      # -------------------------------------------------------------
      # 0Ô∏è‚É£  Checkout source
      # -------------------------------------------------------------
      - name: ‚¨áÔ∏è  Checkout code
        uses: actions/checkout@v4

      # -------------------------------------------------------------
      # 0Ô∏è‚É£.5Ô∏è‚É£  Derive lower-case IMAGE_NAME for Docker tag
      # -------------------------------------------------------------
      - name: üè∑Ô∏è  Set IMAGE_NAME (lower-case repo path)
        run: |
          IMAGE="ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')"
          echo "IMAGE_NAME=$IMAGE" >> "$GITHUB_ENV"
          echo "Will build & push: $IMAGE_NAME"

      # -------------------------------------------------------------
      # 1Ô∏è‚É£  Dockerfile lint (Hadolint CLI ‚Üí SARIF)
      # -------------------------------------------------------------
      - name: üîç  Dockerfile lint (Hadolint)
        id: hadolint
        continue-on-error: true
        run: |
          curl -sSL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint
          chmod +x /usr/local/bin/hadolint
          hadolint -f sarif Containerfile.lite > hadolint-results.sarif
          echo "HADOLINT_EXIT=$?" >> "$GITHUB_ENV"
          exit 0
      - name: ‚òÅÔ∏è  Upload Hadolint SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-results.sarif

      # -------------------------------------------------------------
      # 2Ô∏è‚É£  Set up Buildx & restore cache
      # -------------------------------------------------------------
      - name: üõ†Ô∏è  Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîÑ  Restore BuildKit layer cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_DIR }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      # -------------------------------------------------------------
      # Build & push image (timestamp + latest)
      # -------------------------------------------------------------

      - name: üîë  Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è  Build Docker image
        env:
          DOCKER_CONTENT_TRUST: "1"
        run: |
          TAG=$(date +%s)
          echo "TAG=$TAG" >> "$GITHUB_ENV"
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --file Containerfile.lite \
            --tag $IMAGE_NAME:$TAG \
            --tag $IMAGE_NAME:latest \
            --cache-from type=local,src=${{ env.CACHE_DIR }} \
            --cache-to   type=local,dest=${{ env.CACHE_DIR }},mode=max \
            --push \
            .   # build context is mandatory

      # -------------------------------------------------------------
      # Image lint (Dockle CLI ‚Üí SARIF)
      # -------------------------------------------------------------
      - name: üîç  Image lint (Dockle)
        id: dockle
        continue-on-error: true
        env:
          DOCKLE_VERSION: 0.4.15
        run: |
          curl -sSL "https://github.com/goodwithtech/dockle/releases/download/v${DOCKLE_VERSION}/dockle_${DOCKLE_VERSION}_Linux-64bit.tar.gz" \
            | tar -xz -C /usr/local/bin dockle
          dockle --exit-code 1 --format sarif \
                 --output dockle-results.sarif \
                 $IMAGE_NAME:latest
          echo "DOCKLE_EXIT=$?" >> "$GITHUB_ENV"
          exit 0
      - name: ‚òÅÔ∏è  Upload Dockle SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: dockle-results.sarif

      # -------------------------------------------------------------
      # Generate SPDX SBOM with Syft
      # -------------------------------------------------------------
      - name: üìÑ  Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}:latest
          output-file: sbom.spdx.json

      # -------------------------------------------------------------
      # Trivy CVE scan ‚Üí SARIF
      # -------------------------------------------------------------
      - name: üõ°Ô∏è  Trivy vulnerability scan
        id: trivy
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:latest
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL
          exit-code: 0
      - name: ‚òÅÔ∏è  Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif


      # -------------------------------------------------------------
      # Key-less Cosign sign + attest  (latest **and** timestamp)
      # -------------------------------------------------------------
      - name: üì• Install Cosign
        uses: sigstore/cosign-installer@v3 # provides the matching CLI

      - name: üîè Sign & attest images (latest + timestamp)
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: |
          for REF in $IMAGE_NAME:latest $IMAGE_NAME:${{ env.TAG }}; do
            echo "üîë Signing $REF"
            cosign sign --yes "$REF"

            echo "üìù Attesting SBOM for $REF"
            cosign attest --yes \
                         --predicate sbom.spdx.json \
                         --type spdxjson \
                         "$REF"
          done

      # -------------------------------------------------------------
      # Single gate - fail job on any scanner error
      # -------------------------------------------------------------
      - name: ‚õî  Enforce lint & vuln gates
        if: |
          env.HADOLINT_EXIT != '0' ||
          env.DOCKLE_EXIT   != '0' ||
          steps.trivy.outcome == 'failure'
        run: |
          echo "Hadolint exit: $HADOLINT_EXIT"
          echo "Dockle  exit: $DOCKLE_EXIT"
          echo "Trivy   status: ${{ steps.trivy.outcome }}"
          exit 1
